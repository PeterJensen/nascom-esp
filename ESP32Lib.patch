From ab8ac542ae88b151ab9f304ca2904aba8be7fce3 Mon Sep 17 00:00:00 2001
From: Peter Jensen <kaptajn.jensen@gmail.com>
Date: Mon, 20 Jun 2022 17:18:19 -0700
Subject: [PATCH] Allow bit fonts. Better logging

---
 src/Graphics/Font.h           | 19 +++++++++++++++++--
 src/Graphics/Graphics.h       |  3 +--
 src/I2S/DMABufferDescriptor.h | 28 ++++++++++++++++++++--------
 src/Tools/Log.h               |  3 ++-
 4 files changed, 40 insertions(+), 13 deletions(-)

diff --git a/src/Graphics/Font.h b/src/Graphics/Font.h
index a559d20..8b2b91e 100644
--- a/src/Graphics/Font.h
+++ b/src/Graphics/Font.h
@@ -19,12 +19,14 @@ class Font
 	const unsigned char *pixels;
 	const int charWidth;
 	const int charHeight;
-	Font(int charWidth, int charHeight, const unsigned char *pixels, int firstChar = 32, int charCount = 96)
+  const bool isBits;
+	Font(int charWidth, int charHeight, const unsigned char *pixels, int firstChar = 32, int charCount = 96, bool isBits = false)
 		:firstChar(firstChar),
 		charCount(charCount),
 		pixels(pixels),
 		charWidth(charWidth),
-		charHeight(charHeight)
+		charHeight(charHeight),
+		isBits(isBits)
 	{
 	}
 
@@ -32,4 +34,17 @@ class Font
 	{
 		return ch >= firstChar && ch < firstChar + charCount;
 	}
+
+	bool isSet(int x, int y, char ch) {
+		if (!isBits) {
+		  const unsigned char *pix = &(pixels[charWidth * charHeight * (ch - firstChar)]);
+			return pix[y*charWidth + x] != 0;
+		}
+		else {
+		  const uint8_t *pix = &(pixels[(charWidth * charHeight * (ch - firstChar))>>3]);
+			uint8_t b = pix[y];
+			b = b >> (7-x);
+			return (b & 1) != 0;
+		}
+	}
 };
diff --git a/src/Graphics/Graphics.h b/src/Graphics/Graphics.h
index a4b1f2e..bafe67a 100644
--- a/src/Graphics/Graphics.h
+++ b/src/Graphics/Graphics.h
@@ -147,10 +147,9 @@ class Graphics: public ImageDrawer
 			return;
 		if (!font->valid(ch))
 			return;
-		const unsigned char *pix = &font->pixels[font->charWidth * font->charHeight * (ch - font->firstChar)];
 		for (int py = 0; py < font->charHeight; py++)
 			for (int px = 0; px < font->charWidth; px++)
-				if (*(pix++))
+				if (font->isSet(px, py, ch))
 					dotMix(px + x, py + y, frontColor);
 				else
 					dotMix(px + x, py + y, backColor);
diff --git a/src/I2S/DMABufferDescriptor.h b/src/I2S/DMABufferDescriptor.h
index 83f0e49..37c18ee 100644
--- a/src/I2S/DMABufferDescriptor.h
+++ b/src/I2S/DMABufferDescriptor.h
@@ -18,10 +18,14 @@ class DMABufferDescriptor : protected lldesc_t
 	static void *allocateBuffer(int bytes, bool clear = true, unsigned long clearValue = 0)
 	{
 		bytes = (bytes + 3) & 0xfffffffc;
+		DEBUG_PRINTF("allocateBuffer (DMA): bytes: 0x%0x(%d)\n", bytes, bytes);
+		size_t free_size = heap_caps_get_free_size(MALLOC_CAP_DMA);
+		DEBUG_PRINTF("free: 0x%0x(%d)\n", free_size, free_size);
 		void *b = heap_caps_malloc(bytes, MALLOC_CAP_DMA);
 		if (!b)
-			DEBUG_PRINTLN("Failed to alloc dma buffer");
-		if (clear)
+			DEBUG_PRINTF("Failed to alloc dma buffer. bytes = 0x%0x\n", bytes);
+
+		if (clear && b != nullptr)
 			for (int i = 0; i < bytes / 4; i++)
 				((unsigned long *)b)[i] = clearValue;
 		return b;
@@ -31,13 +35,21 @@ class DMABufferDescriptor : protected lldesc_t
 	{
 		void **arr = (void **)malloc(count * sizeof(void *));
 		if(!arr)
-			ERROR("Not enough DMA memory");
-		for (int i = 0; i < count; i++)
-		{
-			arr[i] = DMABufferDescriptor::allocateBuffer(bytes, true, clearValue);
-			if(!arr[i])
-				ERROR("Not enough DMA memory");
+			ERROR("Not enough memory");
+		void *buffer = DMABufferDescriptor::allocateBuffer(bytes*count, true, clearValue);
+		if (!buffer)
+		  ERROR("Not enough DMA memory");
+		for (int i = 0; i < count; i++) {
+			arr[i] = buffer;
+			buffer = (void *)((unsigned int)buffer + bytes);
 		}
+
+//		for (int i = 0; i < count; i++)
+//		{
+//			arr[i] = DMABufferDescriptor::allocateBuffer(bytes, true, clearValue);
+//			if(!arr[i])
+//				ERROR("Not enough DMA memory");
+//		}
 		return arr;
 	}
 
diff --git a/src/Tools/Log.h b/src/Tools/Log.h
index 97ffeb4..ccaa0e3 100644
--- a/src/Tools/Log.h
+++ b/src/Tools/Log.h
@@ -16,7 +16,8 @@
 #define DEBUG_PRINTLN(a) Serial.println(a)
 #define DEBUG_PRINT(a) Serial.print(a)
 #define DEBUG_PRINTLNF(a, f) Serial.println(a, f)
-#define DEBUG_PRINTF(a, f) Serial.print(a, f)
+//#define DEBUG_PRINTF(a, f) Serial.print(a, f)
+#define DEBUG_PRINTF(fmt, ...) Serial.printf(fmt, __VA_ARGS__)
 /*
 #define DEBUG_PRINTLN(a) ;
 #define DEBUG_PRINT(a) ;
-- 
2.17.2 (Apple Git-113)


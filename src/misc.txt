// Misc. discarded code

static uint8_t codes[0x85] = {0};
void dumpOrderedScanCodes() {
	for (uint8_t sci = 0; sci < 86; sci++) {
		if ((sci > 0) && (sci % 8 == 0))
			Serial.printf("\n");
		uint8_t sc = fabgl::USLayout.scancodeToVK[sci].scancode;
		Serial.printf("%02X ", sc);
		codes[sc] = sci;
	}
	Serial.printf("Used scan codes:\n");
	for (uint32_t i = 0; i < 0x85; i++) {
		if ((i > 0) && (i % 8 == 0))
			Serial.printf("\n");
		Serial.printf("%02X ", codes[i]);
	}
}

void loop() {
#if 0	
  static uint32_t clen = 1;
	fabgl::Keyboard &keyboard = nascomKeyboard.getKeyboard();
  if (keyboard.scancodeAvailable()) {
    int scode = nascomKeyboard.getKeyboard().getNextScancode();
    Serial.printf("%02X ", scode);
    if (scode == 0xF0 || scode == 0xE0) ++clen;
    --clen;
    if (clen == 0) {
      clen = 1;
      Serial.printf("%s\n", keyboard.virtualKeyToString(keyboard.scancodeToVK(scode, false)));
    }
  }
#endif
	vTaskSuspend(NULL);
}

static void dumpMemory(uint8_t *mem, uint32_t start, uint32_t end) {
  for (uint32_t addr = start; addr < end; addr += 8) {
		DEBUG_PRINTF("%04x", addr);
		for (uint32_t a = addr; a < addr + 8; a++) {
			DEBUG_PRINTF(" %02x", mem[a]);
		}
		DEBUG_PRINTF("\n");
	}
}

